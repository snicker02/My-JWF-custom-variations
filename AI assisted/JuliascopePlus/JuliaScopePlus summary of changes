Okay, we've made quite a few enhancements to the JuliaScopePlusFunc variation! Here's a summary of the changes and new options that were added to the original version you provided:

I. Core Logic Modifications:

Unified transformFunction: The main transform() method now exclusively calls transformFunction(). The specialized methods like transformPower2, transformPowerMinus2, etc., are no longer directly invoked (though their logic is generally covered by transformFunction when power takes those values).
Handling power = 0: Safeguards were added in init() and transformFunction() to prevent division by zero or issues with pContext.random(0) if the power parameter is set to 0.
signum() Call Corrected: A call to signum() was corrected to Integer.signum() to resolve a compiler error.
fract to frac: The fract() function call in the color calculation was changed to frac() as per your request (with the caveat that fract() is standard in MathLib).
II. New Parameters Added and Their Effects:

We've added a suite of new parameters to give you much more control over the fractal's geometry and coloring:

Julia Constant (cX, cY):

Parameters: cX, cY (doubles)
Effect: Adds a constant complex number c = cX + i \cdot cY to the result of each iteration, similar to a standard Julia set (z 
power
 +c). This shifts the "center" or focal point of the Julia-like iterations.
Default: 0.0 for both.
Mixed Power Sign Mode (mixPowerSign):

Parameter: mixPowerSign (double; 0.0 for off, 1.0 for on)
Effect: If on (>= 0.5), for each point, the variation will randomly choose to use either +abs(power) or -abs(power) as the effectivePower for that specific calculation. This allows blending of symmetries from positive and negative powers.
Default: 0.0 (off).
Alternate Power Transformations (used when mixPowerSign chooses the "other" sign):

Parameters: altPowerScale (double), altPowerRotate (double, in radians)
Effect: When mixPowerSign is active and the power sign opposite to the main power parameter's sign is chosen, these parameters apply an additional scaling (altPowerScale) and rotation (altPowerRotate) to the X and Y components generated by that "alternate" power.
Default: altPowerScale = 1.0 (no scale), altPowerRotate = 0.0 (no rotation).
Theta Sign Mode (thetaSignMode):

Parameter: thetaSignMode (double; modes 0.0 to 3.0)
Effect: Controls how the sign of the original angle theta (atan2(y,x)) is used in the new angle calculation a = (2\pi \cdot \text{rnd} \pm \theta) / \text{effectivePower}.
0.0: Sign depends on rnd's parity (original implicit behavior).
1.0: Always uses +theta.
2.0: Always uses -theta.
3.0: Randomly chooses +theta or -theta.
Default: 0.0.
Random Term Mode (rndTermMode):

Parameter: rndTermMode (double; modes 0.0 to 3.0)
Effect: Controls the sign of the $2 \cdot \pi \cdot \text{rnd}$ term in the new angle calculation.
0.0: Always + (2\pi \cdot \text{rnd}) (original implicit behavior).
1.0: Always - (2\pi \cdot \text{rnd}).
2.0: Sign based on rnd's parity.
3.0: Randomly chooses + or -.
Default: 0.0.
Angular Offset (angularOffset):

Parameter: angularOffset (double, in radians)
Effect: Adds a fixed rotation to the calculated angle a before sin and cos are applied. Rotates the entire generated pattern.
Default: 0.0.
Swirl Factor (swirlFactor):

Parameter: swirlFactor (double)
Effect: Adds a radius-dependent rotation to the angle a (a += swirlFactor \cdot \log(1.0 + \text{original_radius})), creating spiral distortions.
Default: 0.0.
Fixed Branch Selection (fixedBranch):

Parameter: fixedBranch (double; -1.0 for random, 0 to abs(power)-1 for specific branch)
Effect: Allows you to select a specific kaleidoscopic "branch" or "slice" instead of the default random selection.
Default: -1.0 (random).
Radial Offset (radialOffset):

Parameter: radialOffset (double)
Effect: Adds a constant value to the calculated radial component (r_component_magnitude) after power scaling but before conversion to Cartesian and before pAmount is applied to the magnitude.
Default: 0.0.
Mandelbrot-like Additive Term (mandelbrotLike):

Parameter: mandelbrotLike (double; 0.0 for Julia, 1.0 for Mandelbrot-like)
Effect:
0.0: Adds the constant (cX, cY) (Julia mode: z 
power
 +c).
1.0: Adds the original affine point (pAffineTP.x, pAffineTP.y) (Mandelbrot-like mode: z 
power
 +z 
0
â€‹
 ).
Default: 0.0.
Coloring Options (colorMode, colorSpeed):

Parameters: colorMode (double; modes 0.0 to 5.0), colorSpeed (double)
Effect: colorMode selects how pVarTP.color (the gradient index) is calculated:
0: None (default JWildfire coloring).
1: Based on the new calculated angle a.
2: Based on the calculated radius r_component_magnitude (log-scaled).
3: Based on the original input angle theta.
4: Based on the chosen random branch rnd.
5: Based on whether effectivePower was positive or negative (when mixPowerSign is active).
colorSpeed multiplies the calculated color value before frac() is applied, controlling the speed of gradient cycling.
Default: colorMode = 0.0, colorSpeed = 1.0.
